import os
import io
import uuid
import logging
from flask import Flask, request, jsonify
from flask_cors import CORS
import torch
import numpy as np
from PIL import Image
import torch.nn as nn
from torchvision import models, transforms
import albumentations
from albumentations.pytorch.transforms import ToTensorV2

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DiseaseClassificationModel:
    def __init__(self, model_path='best_model.pth'):
        """
        Initialize the disease classification model
        
        Args:
            model_path (str): Path to the pre-trained model weights
        """
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        
        # Define model architecture (same as training script)
        base_model = models.resnet50(pretrained=False)
        self.model = nn.Sequential(
            base_model,
            nn.AdaptiveAvgPool2d(1),
            nn.Flatten(),
            nn.Linear(base_model.fc.in_features, 5)  # 5 disease classes
        )
        
        # Load pre-trained weights
        self.model.load_state_dict(torch.load(model_path, map_location=self.device))
        self.model.eval()
        
        # Image transformations
        self.transform = albumentations.Compose([
            albumentations.Resize(500, 500),
            albumentations.Normalize(
                mean=[0.485, 0.456, 0.406], 
                std=[0.229, 0.224, 0.225]
            ),
            ToTensorV2()
        ])
        
        # Disease labels
        self.disease_labels = [
            'Cassava Bacterial Blight',
            'Cassava Brown Streak Disease', 
            'Cassava Green Mottle',
            'Cassava Healthy',
            'Cassava Mosaic Disease'
        ]
    
    def predict(self, image):
        """
        Predict disease from input image
        
        Args:
            image (PIL.Image): Input image
        
        Returns:
            dict: Prediction results with probabilities
        """
        # Convert image to numpy array
        img_array = np.array(image)
        
        # Apply transformations
        transformed = self.transform(image=img_array)
        input_tensor = transformed['image'].unsqueeze(0)
        
        # Predict
        with torch.no_grad():
            outputs = self.model(input_tensor)
            probabilities = torch.softmax(outputs, dim=1)[0]
            top_probs, top_classes = torch.topk(probabilities, k=3)
        
        # Prepare results
        results = [
            {
                'disease': self.disease_labels[cls],
                'probability': prob.item()
            } 
            for cls, prob in zip(top_classes, top_probs)
        ]
        
        return results

# Flask App
app = Flask(__name__)
CORS(app)

# Load model on startup
try:
    classifier = DiseaseClassificationModel()
except Exception as e:
    logger.error(f"Model loading failed: {e}")
    classifier = None

@app.route('/predict', methods=['POST'])
def predict_disease():
    """Endpoint for disease prediction"""
    if 'file' not in request.files:
        return jsonify({'error': 'No file uploaded'}), 400
    
    file = request.files['file']
    
    # Generate unique filename
    filename = f"{uuid.uuid4()}_{file.filename}"
    filepath = os.path.join('uploads', filename)
    
    # Ensure uploads directory exists
    os.makedirs('uploads', exist_ok=True)
    file.save(filepath)
    
    try:
        # Open image and predict
        image = Image.open(filepath).convert('RGB')
        predictions = classifier.predict(image)
        
        # Remove temporary file
        os.remove(filepath)
        
        return jsonify({
            'filename': file.filename,
            'predictions': predictions
        })
    
    except Exception as e:
        logger.error(f"Prediction error: {e}")
        return jsonify({'error': 'Prediction failed'}), 500

@app.route('/health', methods=['GET'])
def health_check():
    """Simple health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'model_loaded': classifier is not None
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
