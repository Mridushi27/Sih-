import React, { useState } from 'react';
import axios from 'axios';

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL || 'http://localhost:5000';

const CassavaLeafDiseasePrediction = () => {
  const [selectedFile, setSelectedFile] = useState(null);
  const [preview, setPreview] = useState(null);
  const [predictions, setPredictions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleFileChange = (event) => {
    const file = event.target.files[0];
    if (file) {
      setSelectedFile(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    if (!selectedFile) return;

    const formData = new FormData();
    formData.append('file', selectedFile);

    setLoading(true);
    setPredictions([]);
    setError(null);

    try {
      const response = await axios.post(`${BACKEND_URL}/predict`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });

      setPredictions(response.data.predictions);
    } catch (err) {
      setError('Failed to predict disease. Please try again.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const renderPredictions = () => {
    return predictions.map((pred, index) => (
      <div 
        key={index} 
        className={`p-4 rounded-lg ${index === 0 ? 'bg-green-100' : 'bg-gray-100'}`}
      >
        <h3 className="font-bold">{pred.disease}</h3>
        <p>Probability: {(pred.probability * 100).toFixed(2)}%</p>
      </div>
    ));
  };

  return (
    <div className="container mx-auto p-6 max-w-2xl">
      <h1 className="text-3xl font-bold text-center mb-6">
        Cassava Leaf Disease Classifier
      </h1>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="flex flex-col items-center">
          <input 
            type="file" 
            accept="image/*"
            onChange={handleFileChange}
            className="mb-4"
          />
          {preview && (
            <img 
              src={preview} 
              alt="Preview" 
              className="max-w-md rounded-lg shadow-lg mb-4"
              style={{ maxHeight: '400px' }}
            />
          )}
        </div>

        <button 
          type="submit" 
          disabled={!selectedFile || loading}
          className={`
            w-full p-3 rounded-lg 
            ${selectedFile ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-500'}
          `}
        >
          {loading ? 'Predicting...' : 'Predict Disease'}
        </button>
      </form>

      {error && (
        <div className="bg-red-100 text-red-800 p-4 rounded-lg mt-4">
          {error}
        </div>
      )}

      {predictions.length > 0 && (
        <div className="mt-6 space-y-4">
          <h2 className="text-2xl font-bold text-center">Predictions</h2>
          <div className="grid grid-cols-3 gap-4">
            {renderPredictions()}
          </div>
        </div>
      )}
    </div>
  );
};

export default CassavaLeafDiseasePrediction;
